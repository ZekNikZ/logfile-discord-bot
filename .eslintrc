{
  "parser": "@typescript-eslint/parser",
  "plugins": [
    // Dependencies for airbnb
    "import",

    "@typescript-eslint",
    "jest",
    "prettier"
  ],
  "settings": {},
  "extends": [
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "plugin:@typescript-eslint/recommended",
    //"plugin:@typescript-eslint/recommended-requiring-type-checking", // More rules that require type checking enabled to run
    "plugin:jest/recommended",
    "prettier",
    "plugin:prettier/recommended"
  ],
  "parserOptions": {
    "project": "tsconfig.json"
  },
  "env": {
    "browser": true, // Allow stuff like "console" because we are in a browser context
    "node": true
  },
  "ignorePatterns": ["build/", "database/", "documentation/", "env/", "Jenkins/", "mnt/"],
  "rules": {
    "prettier/prettier": "error",

    // Too restrictive, writing ugly code to defend against a very unlikely scenario: https://eslint.org/docs/rules/no-prototype-builtins
    "no-prototype-builtins": "off",
    "prefer-destructuring": "off",
    "no-restricted-syntax": "off",
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    "class-methods-use-this": "off", // Allows a class method that doesn't have "this"

    // https://basarat.gitbooks.io/typescript/docs/tips/defaultIsBad.html
    "import/prefer-default-export": "off",

    // Type info
    "@typescript-eslint/no-explicit-any": "off", // Allow "any" type.

    // Allow most functions to rely on type inference. If the function is exported, then `@typescript-eslint/explicit-module-boundary-types` will ensure it's typed.
    "@typescript-eslint/explicit-function-return-type": "off",
    // Allow empty interfaces
    "@typescript-eslint/no-empty-interface": "off",
    "import/no-cycle": ["error", { "commonjs": true }],

    /////////////////
    /* STYLE RULES */
    /////////////////
    // Most style rules are set to off, to let prettify handle styling
    "@typescript-eslint/comma-dangle": "off", // Allow dangling commas
    "linebreak-style": "off", // CRLF vs LF
    "no-plusplus": ["warn", { "allowForLoopAfterthoughts": true }],
    "no-underscore-dangle": "off",
    "@typescript-eslint/no-use-before-define": "warn",
    "indent": "off"
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        // Can't really have types without typescript
        "@typescript-eslint/explicit-module-boundary-types": "off"
      }
    },
    {
      "files": ["*.{ts,tsx}"],
      "rules": {
        //Type checking the props takes care of this
        // Rules from "recommended-requiring-type-checking"
        /*"@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/unbound-method": "error"*/
      }
    },

    // TODO: Deal with these autogenerated types
    {
      "files": ["src/types/**/*"],
      "rules": {
        "import/no-cycle": "warn"
      }
    }
  ]
}
